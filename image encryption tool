from PIL import Image
import numpy as np

def encrypt_image(image_path, key, output_path):
    image = Image.open(image_path)
    data = np.array(image)
    
    # Simple encryption: Add key value to each pixel (mod 256 to stay within bounds)
    encrypted_data = (data + key) % 256
    encrypted_image = Image.fromarray(encrypted_data.astype('uint8'))
    encrypted_image.save(output_path)
    print(f"Encrypted image saved to {output_path}")

def decrypt_image(image_path, key, output_path):
    image = Image.open(image_path)
    data = np.array(image)
    
    # Simple decryption: Subtract key value from each pixel (mod 256)
    decrypted_data = (data - key) % 256
    decrypted_image = Image.fromarray(decrypted_data.astype('uint8'))
    decrypted_image.save(output_path)
    print(f"Decrypted image saved to {output_path}")

if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="Simple Image Encryption Tool")
    parser.add_argument("mode", choices=["encrypt", "decrypt"], help="Mode: encrypt or decrypt")
    parser.add_argument("input", help="Input image path")
    parser.add_argument("output", help="Output image path")
    parser.add_argument("key", type=int, help="Encryption key (integer)")

    args = parser.parse_args()

    if args.mode == "encrypt":
        encrypt_image(args.input, args.key, args.output)
    elif args.mode == "decrypt":
        decrypt_image(args.input, args.key, args.output)
